# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
##
orbs:
  anchore: anchore/anchore-engine@1.6.0
  github-release: h-matsuo/github-release@0.1.3
  slack: circleci/slack@3.4.2

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
  apk --no-cache add git
  apk --no-cache add ca-certificates
  apk --no-cache add curl
  apk --no-cache add openssh-client
  apk add --no-cache -t build-dependencies make gcc g++ python libtool autoconf automake jq
  npm config set unsafe-perm true
  npm install -g node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
  apk upgrade --no-cache
  apk --no-cache add \
          python3 \
          py3-pip \
          groff \
          less \
          mailcap
  pip3 install --upgrade pip awscli==1.14.5 s3cmd==2.0.1 python-magic

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: /home/circleci/project
    docker:
      - image: node:12.16.1-alpine

  default-machine:
    machine:
      image: ubuntu-1604:201903-01

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Access npm folder as root
          command: cd $(npm root -g)/npm
      - run:
          name: Update NPM install
          command: npm ci
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  test-unit:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Execute unit tests
          command: npm run test:unit
      - run:
          name: prepare test/results
          command: |
            mkdir -p test/results
            mv junit.xml test/results
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results

  build-local:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Setup Docker env variables
          command: |
            echo 'export DOCKER_ORG=`cat package.json | jq -r .name | sed s/@// | sed s/\\\\/.*//`' >> $BASH_ENV
            echo 'export CIRCLE_PROJECT_REPONAME=`cat package.json | jq -r .name | sed s/@// | sed s/\.*\\\\///`' >> $BASH_ENV
      - run:
          name: Build Docker local image
          command: |
            echo "Building Docker image: local"
            docker build -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local .
      - run:
          name: Save docker image to workspace
          command: docker save -o /tmp/docker-image.tar $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local
      - persist_to_workspace:
          root: /tmp
          paths:
            - ./docker-image.tar


##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - build-local:
          context: org-global
          filters:
            tags:
              only: /.*/

      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/


      - test-unit:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/

      # - test-integration:
      #     context: org-global
      #     requires:
      #       - setup
      #     filters:
      #       tags:
      #         only: /.*/

      # # New commits to master release automatically
      # - release:
      #     context: org-global
      #     requires:
      #       - test-unit
      #     filters:
      #       branches:
      #         only:
      #           - master

      - deploy-dev:
          context: org-global
          requires:
            - test-unit
          filters:
            branches:
              only:
                - master

      # - deploy-prod:
      #     context: org-global
      #     filters:
      #       branches:
      #         only:
      #           - production
