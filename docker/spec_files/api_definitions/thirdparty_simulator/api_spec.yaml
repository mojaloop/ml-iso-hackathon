# DO NOT EDIT THIS FILE DIRECTLY!!!! INSTEAD, EDIT src/interface/ttk-thirdparty-sim-api-template.yaml and run `npm run build:ttk-thirdparty-sim:api` TO UPDATE THIS FILE
openapi: 3.0.2
info:
  title: Mojaloop Thirdparty & DFSP Simulator API
  version: '1.0'
  description: A Mojaloop API that will simulate the out of bound user authentication (OTP or WEB) between a DFSP/PISP and their user
  license:
    name: TBD
    url: TBD
servers:
  - url: /
paths:
  /login:
    post:
      tags:
        - DFSPSim
      description: The HTTP request `POST /login` is used to login to DFSP application by providing credentials.
      summary: DFSP user login
      operationId: DFSPLogin
      parameters:
        - name: Accept
          in: header
          required: true
          schema:
            type: string
          description: |
            The `Accept` header field indicates the version of the API the client
            would like the server to use.
        - name: Content-Length
          in: header
          required: false
          schema:
            type: integer
          description: |
            The `Content-Length` header field indicates the anticipated size of the
            payload body. Only sent if there is a body.
            **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/2'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DFSPLoginRequest'
            example:
              userName: dfspa.user.name
              password: dfspa.user.password
              consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                title: ErrorInformationResponse
                type: object
                description: Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
                properties:
                  errorInformation:
                    title: ErrorInformation
                    type: object
                    description: Data model for the complex type ErrorInformation.
                    properties:
                      errorCode:
                        title: ErrorCode
                        type: string
                        pattern: '^[1-9]\d{3}$'
                        description: |
                          The API data type ErrorCode is a JSON String of four characters,
                          consisting of digits only. Negative numbers are not allowed.
                          A leading zero is not allowed. Each error code in the API is a
                          four-digit number, for example, 1234, where the first number
                          (1 in the example) represents the high-level error category,
                          the second number (2 in the example) represents the low-level error category,
                          and the last two numbers (34 in the example) represent the specific error.
                        example: 5100
                      errorDescription:
                        title: ErrorDescription
                        type: string
                        minLength: 1
                        maxLength: 128
                        description: Error description string.
                        example: This is an error description.
                      extensionList:
                        title: ExtensionList
                        type: object
                        description: |
                          Data model for the complex type ExtensionList.
                          An optional list of extensions, specific to deployment.
                        properties:
                          extension:
                            type: array
                            items:
                              title: Extension
                              type: object
                              description: Data model for the complex type Extension.
                              properties:
                                key:
                                  title: ExtensionKey
                                  type: string
                                  minLength: 1
                                  maxLength: 32
                                  description: Extension key.
                                value:
                                  title: ExtensionValue
                                  type: string
                                  minLength: 1
                                  maxLength: 128
                                  description: Extension value.
                              required:
                                - key
                                - value
                            minItems: 1
                            maxItems: 16
                            description: Number of Extension elements.
                        required:
                          - extension
                    required:
                      - errorCode
                      - errorDescription
          headers:
            Content-Length:
              required: false
              schema:
                type: integer
              description: |
                The `Content-Length` header field indicates the anticipated
                size of the payload body. Only sent if there is a body.
                **Note:** The API supports a maximum size of 5242880 bytes
                (5 Megabytes).
            Content-Type:
              schema:
                type: string
              required: true
              description: The `Content-Type` header indicates the specific version of the API used to send the payload body.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'
        '501':
          description: Not Implemented
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'
          headers:
            Content-Length:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'
            Content-Type:
              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'
  /authorize:
    post:
      tags:
        - DFSPSim
      description: The HTTP request `POST /authorize` is used to grant consent by a DFSP user.
      summary: DFSP user authorization
      operationId: DFSPAuthorize
      parameters:
        - $ref: '#/paths/~1login/post/parameters/0'
        - $ref: '#/paths/~1login/post/parameters/1'
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/2'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DFSPAuthorizeRequest'
            example:
              userName: dfspa.user.name
              consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3
      responses:
        '200':
          description: Response containing secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DFSPAuthorizeResponse'
              example:
                secret: xx auth secret xx
        '400':
          $ref: '#/paths/~1login/post/responses/400'
        '401':
          $ref: '#/paths/~1login/post/responses/401'
        '403':
          $ref: '#/paths/~1login/post/responses/403'
        '404':
          $ref: '#/paths/~1login/post/responses/404'
        '405':
          $ref: '#/paths/~1login/post/responses/405'
        '406':
          $ref: '#/paths/~1login/post/responses/406'
        '501':
          $ref: '#/paths/~1login/post/responses/501'
        '503':
          $ref: '#/paths/~1login/post/responses/503'
  /sendOTP:
    post:
      tags:
        - DFSPSim
      description: The HTTP request `POST /sendOTP` is used to send OTP to a DFSP user (most likely through SMS).
      summary: DFSP Send OTP
      operationId: SendOTP
      parameters:
        - $ref: '#/paths/~1login/post/parameters/0'
        - $ref: '#/paths/~1login/post/parameters/1'
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/2'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendOTPRequest'
            example:
              userName: dfspa.user.name
              consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3
              message: '9876'
      responses:
        '200':
          $ref: '#/paths/~1login/post/responses/200'
        '400':
          $ref: '#/paths/~1login/post/responses/400'
        '401':
          $ref: '#/paths/~1login/post/responses/401'
        '403':
          $ref: '#/paths/~1login/post/responses/403'
        '404':
          $ref: '#/paths/~1login/post/responses/404'
        '405':
          $ref: '#/paths/~1login/post/responses/405'
        '406':
          $ref: '#/paths/~1login/post/responses/406'
        '501':
          $ref: '#/paths/~1login/post/responses/501'
        '503':
          $ref: '#/paths/~1login/post/responses/503'
  /verifyOTPorSecret:
    post:
      tags:
        - DFSPSim
      description: The HTTP request `POST /verifyOTPorSecret` is used to verify OTP or Secret received from PISP.
      summary: /verifyOTPorSecret
      operationId: VerifyOTPorSecret
      parameters:
        - $ref: '#/paths/~1login/post/parameters/0'
        - $ref: '#/paths/~1login/post/parameters/1'
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/2'
      requestBody:
        description: Perform verification of OTP or Secret
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyOTPorSecretRequest'
            examples:
              sample1:
                value:
                  consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3
                  value: '1234'
              sample2:
                value:
                  consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c4
                  value: xx auth secret xx
      responses:
        '200':
          $ref: '#/paths/~1login/post/responses/200'
        '400':
          $ref: '#/paths/~1login/post/responses/400'
        '401':
          $ref: '#/paths/~1login/post/responses/401'
        '403':
          $ref: '#/paths/~1login/post/responses/403'
        '404':
          $ref: '#/paths/~1login/post/responses/404'
        '405':
          $ref: '#/paths/~1login/post/responses/405'
        '406':
          $ref: '#/paths/~1login/post/responses/406'
        '501':
          $ref: '#/paths/~1login/post/responses/501'
        '503':
          $ref: '#/paths/~1login/post/responses/503'
  '/OTPorSecret/{ID}':
    get:
      tags:
        - DFSPSim
      description: 'The HTTP request `GET /OTPorSecret/{ID}` is used to get OTP or Secret from DFSP.'
      summary: Get OTP or Secret for specified consentRequestId
      operationId: GetOTPorSecret
      parameters:
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/0'
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/1'
        - $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/parameters/2'
      responses:
        '200':
          description: Response containing details of the OTP or Secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOTPorSecretResponse'
              examples:
                sample1:
                  value:
                    value: '1234'
                sample2:
                  value:
                    value: xx auth secret xx
        '400':
          $ref: '#/paths/~1login/post/responses/400'
        '401':
          $ref: '#/paths/~1login/post/responses/401'
        '403':
          $ref: '#/paths/~1login/post/responses/403'
        '404':
          $ref: '#/paths/~1login/post/responses/404'
        '405':
          $ref: '#/paths/~1login/post/responses/405'
        '406':
          $ref: '#/paths/~1login/post/responses/406'
        '501':
          $ref: '#/paths/~1login/post/responses/501'
        '503':
          $ref: '#/paths/~1login/post/responses/503'
  '/store/consentRequests/{ID}':
    parameters:
      - name: ID
        in: path
        required: true
        schema:
          type: string
        description: The identifier value.
      - name: Content-Type
        in: header
        schema:
          type: string
        required: true
        description: |
          The `Content-Type` header indicates the specific version of the API used
          to send the payload body.
      - name: X-Forwarded-For
        in: header
        schema:
          type: string
        required: false
        description: |
          The `X-Forwarded-For` header field is an unofficially accepted standard used
          for informational purposes of the originating client IP address, as a
          request might pass multiple proxies, firewalls, and so on. Multiple
          `X-Forwarded-For` values should be expected and supported by implementers
          of the API.
          **Note:** An alternative to `X-Forwarded-For` is defined in
          [RFC 7239](https://tools.ietf.org/html/rfc7239).
          However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
    get:
      tags:
        - DFSPSim
      operationId: GetConsentRequest
      summary: GetConsentRequest
      description: |
        The HTTP request `GET /store/consentRequests/{ID}` is used by DFSP to load a specified consentRequest.
      responses:
        '200':
          description: Response containing consentRequest details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreConsent'
              example:
                scopes:
                  - accountId: dfspa.username.1234
                    actions:
                      - accounts.transfer
                      - accounts.getBalance
                  - accountId: dfspa.username.5678
                    actions:
                      - accounts.transfer
                      - accounts.getBalance
        '400':
          $ref: '#/paths/~1login/post/responses/400'
        '401':
          $ref: '#/paths/~1login/post/responses/401'
        '403':
          $ref: '#/paths/~1login/post/responses/403'
        '404':
          $ref: '#/paths/~1login/post/responses/404'
        '405':
          $ref: '#/paths/~1login/post/responses/405'
        '406':
          $ref: '#/paths/~1login/post/responses/406'
        '501':
          $ref: '#/paths/~1login/post/responses/501'
        '503':
          $ref: '#/paths/~1login/post/responses/503'
    post:
      tags:
        - DFSPSim
      operationId: StoreConsentRequest
      summary: StoreConsentRequest
      description: |
        The HTTP request `POST /store/consentRequests/{ID}` is used by a DFSP to store consentRequests.
      requestBody:
        description: The consentRequest to store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreConsent'
            example:
              scopes:
                - accountId: dfspa.username.1234
                  actions:
                    - accounts.transfer
                    - accounts.getBalance
                - accountId: dfspa.username.5678
                  actions:
                    - accounts.transfer
                    - accounts.getBalance
      responses:
        '200':
          $ref: '#/paths/~1login/post/responses/200'
        '400':
          $ref: '#/paths/~1login/post/responses/400'
        '401':
          $ref: '#/paths/~1login/post/responses/401'
        '403':
          $ref: '#/paths/~1login/post/responses/403'
        '404':
          $ref: '#/paths/~1login/post/responses/404'
        '405':
          $ref: '#/paths/~1login/post/responses/405'
        '406':
          $ref: '#/paths/~1login/post/responses/406'
        '501':
          $ref: '#/paths/~1login/post/responses/501'
        '503':
          $ref: '#/paths/~1login/post/responses/503'
components:
  schemas:
    SecretValue:
      title: SecretValue
      type: string
      minLength: 11
      maxLength: 128
    UserName:
      title: UserName
      type: string
      minLength: 1
      maxLength: 25
    Password:
      title: Password
      type: string
      minLength: 1
      maxLength: 25
    Message:
      title: Message
      type: string
      description: OTP value or error message
    DFSPLoginRequest:
      title: DFSPLoginRequest
      type: object
      description: POST /login request
      properties:
        userName:
          $ref: '#/components/schemas/UserName'
        password:
          $ref: '#/components/schemas/Password'
        consentRequestId:
          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'
      required:
        - userName
        - password
        - consentRequestId
    DFSPAuthorizeRequest:
      title: DFSPAuthorizeRequest
      type: object
      description: POST /authorize request
      properties:
        userName:
          $ref: '#/components/schemas/UserName'
        consentRequestId:
          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'
      required:
        - userName
        - consentRequestId
    DFSPAuthorizeResponse:
      title: DFSPAuthorizeResponse
      type: object
      description: POST /authorize response
      properties:
        secret:
          $ref: '#/components/schemas/SecretValue'
      required:
        - secret
    SendOTPRequest:
      title: SendOTPRequest
      type: object
      description: POST /sendOTP request
      properties:
        userName:
          $ref: '#/components/schemas/UserName'
        consentRequestId:
          title: CorrelationId
          type: string
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
          description: |
            Identifier that correlates all messages of the same sequence.
            The API data type UUID (Universally Unique Identifier) is a JSON String
            in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122),
            that is restricted by a regular expression for interoperability reasons.
            A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
          example: b51ec534-ee48-4575-b6a9-ead2955b8069
        message:
          $ref: '#/components/schemas/Message'
      required:
        - userName
        - consentRequestId
        - message
    VerifyOTPorSecretRequest:
      title: VerifyOTPorSecretRequest
      type: object
      description: POST /verifyOTPorSecret request
      properties:
        consentRequestId:
          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'
        value:
          oneOf:
            - $ref: '#/components/schemas/GetOTPorSecretResponse/properties/value/oneOf/0'
            - $ref: '#/components/schemas/SecretValue'
          description: Contains the OTP or Secret value.
      required:
        - consentRequestId
        - value
    GetOTPorSecretResponse:
      title: GetOTPorSecretResponse
      type: object
      description: 'Get /OTPorSecret/{ID} response'
      properties:
        value:
          oneOf:
            - title: OtpValue
              type: string
              pattern: '^\d{3,10}$'
              description: |
                The API data type OtpValue is a JSON String of 3 to 10 characters,
                consisting of digits only. Negative numbers are not allowed.
                One or more leading zeros are allowed.
            - $ref: '#/components/schemas/SecretValue'
          description: Contains the OTP or Secret value.
      required:
        - value
    StoreConsent:
      title: StoreConsent
      type: object
      description: store consent details
      properties:
        scopes:
          type: array
          items:
            title: Scope
            type: object
            description: Scope + Account Identifier mapping for a Consent.
            example: |
              {
                accountId: "dfsp.username.5678",
                actions: [ "accounts.transfer", "accounts.getBalance" ]
              }
            properties:
              accountId:
                title: AccountAddress
                type: string
                description: |
                  A long-lived unique account identifier provided by the DFSP. This MUST NOT
                  be Bank Account Number or anything that may expose a User's private bank
                  account information.
                pattern: '^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$'
                minLength: 1
                maxLength: 1023
              actions:
                type: array
                items:
                  title: ConsentScopeType
                  type: string
                  enum:
                    - accounts.getBalance
                    - accounts.transfer
                  description: |
                    The scopes requested for a ConsentRequest.
                    - "accounts.getBalance" - Get the balance of a given account.
                    - "accounts.transfer" - Initiate a transfer from an account.
            required:
              - accountId
              - actions
      required:
        - scopes
